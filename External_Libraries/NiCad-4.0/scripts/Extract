#!/usr/bin/
# Generic NiCad extractor script
#
# Usage:  Extract granularity language system-directory select-pattern ignore-pattern 
#           where granularity is one of:  { functions blocks ... }
#           and   language    is one of:  { c java cs py ... }
#           and   select-pattern is a grep pattern
#           and   ignore-pattern is a grep pattern

# Revised 3.12.15

ulimit -s hard

#echo 0_$0 >> "/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/mylog00.txt"
#echo 1_$1 >> "/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/mylog00.txt"
#echo 2_$2 >> "/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/mylog00.txt"
#echo 3_$3 >> "/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/mylog00.txt"
#echo 4_$4 >> "/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/mylog00.txt"
#echo 5_$5 >> "/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/mylog00.txt"
#echo 6_$6 >> "/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/mylog00.txt"
#echo 7_$7 >> "/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/mylog00.txt"
#shift
destinationFile=$6
# Find our installation
lib="${0%%/scripts/Extract}"
if [ ! -d ${lib} ]
then
    echo "*** Error:  cannot find NiCad installation ${lib}"
    echo ""
    exit 99
fi

# check granularity
if [ "$1" != "" ] 
then
    granularity=$1
    shift
else
    echo "Usage:  Extract granularity language system-directory select-pattern ignore-pattern"
    echo "          where granularity is one of:  { functions blocks ... }"
    echo "          and   language    is one of:  { c java cs py ... }"
    echo "          and   select-pattern is a grep pattern"
    echo "          and   ignore-pattern is a grep pattern"
    exit 99
fi

# check language
if [ "$1" != "" ] 
then
    language=$1
    shift
else
    echo "Usage:  Extract granularity language system-directory select-pattern ignore-pattern"
    echo "          where granularity is one of:  { functions blocks ... }"
    echo "          and   language    is one of:  { c java cs py ... }"
    echo "          and   select-pattern is a grep pattern"
    echo "          and   ignore-pattern is a grep pattern"
    exit 99
fi

# check at least one system directory
if [ ! -d "$1" ]
then
    echo "Usage:  Extract granularity language system-directory select-pattern ignore-pattern"
    echo "          where granularity is one of:  { functions blocks ... }"
    echo "          and   language    is one of:  { c java cs py ... }"
    echo "          and   select-pattern is a grep pattern"
    echo "          and   ignore-pattern is a grep pattern"
    exit 99
fi

# check we have the extractor we need
if [ ! -s ${lib}/txl/${language}-extract-${granularity}.txl ]
then
    echo "*** ERROR: Language ${language} not supported at granularity ${granularity}"
    exit 99
fi

if [ ! -x ${lib}/txl/${language}-extract-${granularity}.x ]
then
    echo "*** ERROR: ${lib}/txl/${language}-extract-${granularity}.txl has not been compiled - use 'make'" 
    exit 100
fi

# Check we have a system
system=$1
if [ ! -d "${system}" ]
then
    echo "*** ERROR: Can't find system source directory ${system}"
    exit 99
fi

# check if we have a select  pattern
shift
if [ "$1" != "" ] 
then
    select="$1"
else
    select=""
fi

# check if we have an ignore pattern
shift
if [ "$1" != "" ] 
then
    ignore="$1"
else
    ignore="_NO_IGNORE_"
fi

# Clean up any previous results
/bin/rm -rf ${system}_${granularity}
echo -n > ${destinationFile}_${granularity}.xml

# Extract potential clones
date

# Find all language source files in the directory and its subdirectories
echo "${lib}/txl/${language}-extract-${granularity}.x ALL.${language} >> ${destinationFile}_${granularity}.xml"

result=0

for i in `/usr/bin/find ${system} -type f | /bin//grep "${select}" | /bin//grep -v "${ignore}" | /bin//grep "\.${language}"'$'`
do
    source=${i}
    if [ ${language} = "c" ] || [ ${language} = "cs" ]
    then
        if [ -x ${lib}/txl/ifdef.x ]
        then
            # echo "${lib}/txl/ifdef.x ${i} > ${i}.ifdefed"
            ${lib}/txl/ifdef.x ${i} > ${i}.ifdefed
        else
	    echo "*** ERROR: ${lib}/txl/ifdef.txl has not been compiled - use 'make'" 
	    exit 100
        fi
        source=${i}.ifdefed
    fi
    if [ ${language} = "py" ] 
    then
        if [ -x ${lib}/txl/pyindent.x ]
        then
            # echo "${lib}/txl/pyindent.x ${i} > ${i}.pyindent"
            ${lib}/txl/pyindent.x ${i} > ${i}.pyindent
        else
	    echo "*** ERROR: ${lib}/txl/pyindent.txl has not been compiled - use 'make'" 
	    exit 100
        fi
        source=${i}.pyindent
    fi

    # echo "${lib}/txl/${language}-extract-${granularity}.x ${source} >> ${system}_${granularity}.xml"
    ${lib}/txl/${language}-extract-${granularity}.x "${source}" >> ${destinationFile}_${granularity}.xml

    if [ $? != 0 ]
    then
	result=$?
    fi
done

echo ""
date
echo ""

exit $result
